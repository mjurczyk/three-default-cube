{"version":3,"sources":["assets/models/character.glb","assets/models/demo-basic.glb","assets/models/demo-actions-and-ui.glb","assets/models/demo-game-objects.glb","assets/models/demo-persistence.glb","assets/models/demo-physics.glb","assets/models/demo-ui-alignment.glb","assets/ui/spinner-default.png","assets/ui/font.ttf","assets/models/intro.glb","game-views/demo-views-and-scenes.js","game-views/demo-camera.js","game-views/demo-actions-and-ui.js","game-views/demo-debugging.js","game-views/demo-game-objects.js","game-views/demo-persistence.js","game-views/demo-physics.js","game-views/demo-ai.js","game-views/demo-ui-alignment.js","index.js"],"names":["module","exports","DemoViewsAndScenes","a","scene","RenderService","getScene","ambientLight","AssetsService","getAmbientLight","add","Preloader","requireAssets","getModel","require","onComplete","worldModel","characterModel","SceneService","parseScene","target","navpath","gameObjects","object","replacePlaceholder","animations","AnimationWrapper","playAnimation","physics","PhysicsWrapper","enableNavmaps","playerSpeed","TimeService","registerFrameListener","keyUp","InputService","keys","keyDown","keyLeft","keyRight","velocity","MathService","getVec3","z","x","length","MathUtils","lerp","direction","rotationMock","UtilsService","getEmpty","getWorldPosition","sub","position","copy","quaternion","lookAt","slerp","releaseVec3","releaseEmpty","normalize","multiplyScalar","setSimpleVelocity","blendInAnimation","onCreate","CameraService","useCamera","getCamera","ViewClass","DemoCamera","follow","followPivotPosition","set","rotation","y","maxPlayerSpeed","getWorldDirection","Math","abs","DemoActionsAndUi","VarService","setVar","actions","min","getVar","material","emissiveIntensity","scale","setScalar","max","actionButton","emissive","Three","originalScale","DemoDebugging","preloadModel","spawnScene","then","randFloat","mathPi4","setTimeout","disposeAsset","random","DemoGameObjects","cubeRed","elapsedTime","sin","cubeGreen","cubeBlue","scaleTarget","DemoPersistence","registerPersistentVar","spinnerTexture","GameInfoService","config","textures","spinner","SnowSurface","snowCanvas","snowTexture","snowProps","textureSize","textureColor","snowOffset","snowDisplacement","this","disposeProps","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","globalCompositeOperation","registerDisposable","color","side","displacementMap","displacementScale","metalness","roughness","hit","uv","canvas","image","transformUv","needsUpdate","DemoPhysics","PhysicsService","registerSurfaceHandler","DemoAi","enableNoClip","ai","AiWrapper","registerBehaviour","hasTargetNode","getDistanceToTargetNode","setTargetNode","path","AiService","getAiNodeById","getRandomElement","findPathToTargetNode","targetNode","getTargetNode","targetNodePosition","createArrowHelper","getAiBehaviour","playerDirection","DemoUiAlignment","registerIntervalListener","UiService","registerUiElement","uiScene","AnimationService","registerAnimation","userData","clone","onStep","animationTime","cos","demoId","Object","fromEntries","URLSearchParams","window","location","search","entries","DummyDebug","on","DebugFlags","DEBUG_ENABLE","DEBUG_LIVE","DEBUG_LOG_ASSETS","DEBUG_LOG_MEMORY","DEBUG_LOG_POOLS","DEBUG_STORAGE","DEBUG_TIME_LISTENERS","system","camera","texture","font","model","SystemService","init","onReady","rootElement","querySelector","domElement","renderView","run"],"mappings":"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","file":"static/js/main.523e2e2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/character.e1ab850e.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-basic.ed8ca940.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-actions-and-ui.6235c1a6.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-game-objects.7e1b2b59.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-persistence.146d3590.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-physics.79823df6.glb\";","module.exports = __webpack_public_path__ + \"static/media/demo-ui-alignment.3e84587d.glb\";","module.exports = __webpack_public_path__ + \"static/media/spinner-default.9d266d9a.png\";","module.exports = __webpack_public_path__ + \"static/media/font.3ed9575d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/intro.56f385dd.glb\";","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  TimeService,\n  InputService,\n  PhysicsWrapper,\n  MathService,\n  replacePlaceholder,\n  AnimationWrapper,\n  UtilsService,\n  MathUtils\n} from 'three-default-cube';\n\nexport class DemoViewsAndScenes extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-basic.glb')),\n        AssetsService.getModel(require('../assets/models/character.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n        characterModel\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          navpath: 1,\n          gameObjects: {\n            'player': (object) => {\n              replacePlaceholder(object, characterModel);\n\n              const animations = new AnimationWrapper(characterModel);\n              animations.playAnimation('idle');\n\n              const physics = new PhysicsWrapper(object);\n              physics.enableNavmaps();\n\n              let playerSpeed = 0.0;\n              const maxPlayerSpeed = 0.04;\n\n              TimeService.registerFrameListener(() => {\n                const keyUp = InputService.keys['w'];\n                const keyDown = InputService.keys['s'];\n                const keyLeft = InputService.keys['a'];\n                const keyRight = InputService.keys['d'];\n\n                const velocity = MathService.getVec3(0.0, 0.0, 0.0);\n\n                if (keyUp) {\n                  velocity.z -= 1.0;\n                }\n\n                if (keyDown) {\n                  velocity.z += 1.0;\n                }\n\n                if (keyLeft) {\n                  velocity.x -= 1.0;\n                }\n\n                if (keyRight) {\n                  velocity.x += 1.0;\n                }\n\n                if (velocity.length() > 0.0) {\n                  playerSpeed = MathUtils.lerp(playerSpeed, maxPlayerSpeed, 0.2);\n\n                  const direction = MathService.getVec3(0.0, 0.0, 0.0);\n                  const rotationMock = UtilsService.getEmpty();\n\n                  object.getWorldPosition(direction).sub(velocity);\n                  rotationMock.position.copy(object.position);\n                  rotationMock.quaternion.copy(object.quaternion);\n                  rotationMock.lookAt(direction);\n\n                  object.quaternion.slerp(rotationMock.quaternion, 0.2);\n\n                  MathService.releaseVec3(direction);\n                  UtilsService.releaseEmpty(rotationMock);\n                } else {\n                  playerSpeed = MathUtils.lerp(playerSpeed, 0.0, 0.2);\n                }\n\n                velocity.normalize().multiplyScalar(playerSpeed);\n\n                physics.setSimpleVelocity(velocity);\n\n                animations.blendInAnimation('run', playerSpeed * (1 / maxPlayerSpeed));\n\n                MathService.releaseVec3(velocity);\n              });\n            }\n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  TimeService,\n  InputService,\n  PhysicsWrapper,\n  MathService,\n  replacePlaceholder,\n  AnimationWrapper,\n  MathUtils\n} from 'three-default-cube';\n\nexport class DemoCamera extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-basic.glb')),\n        AssetsService.getModel(require('../assets/models/character.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n        characterModel\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          navpath: 1,\n          gameObjects: {\n            'player': (object) => {\n              replacePlaceholder(object, characterModel);\n\n              const animations = new AnimationWrapper(characterModel);\n              animations.playAnimation('idle');\n\n              const physics = new PhysicsWrapper(object);\n              physics.enableNavmaps();\n\n              let playerSpeed = 0.0;\n              const maxPlayerSpeed = 0.04;\n\n              CameraService.follow(object);\n              CameraService.followPivotPosition.set(0.0, 2.0, 2.0);\n\n              TimeService.registerFrameListener(() => {\n                const keyUp = InputService.keys['w'];\n                const keyDown = InputService.keys['s'];\n                const keyLeft = InputService.keys['a'];\n                const keyRight = InputService.keys['d'];\n\n                if (keyLeft) {\n                  object.rotation.y -= 0.025;\n                }\n\n                if (keyRight) {\n                  object.rotation.y += 0.025;\n                }\n\n                if (keyUp) {\n                  playerSpeed = MathUtils.lerp(playerSpeed, -maxPlayerSpeed, 0.2);\n                } else if (keyDown) {\n                  playerSpeed = MathUtils.lerp(playerSpeed, maxPlayerSpeed / 2.0, 0.2);\n                } else {\n                  playerSpeed = MathUtils.lerp(playerSpeed, 0.0, 0.2);\n                }\n\n                const velocity = MathService.getVec3();\n                object.getWorldDirection(velocity);\n\n                velocity.multiplyScalar(playerSpeed);\n\n                physics.setSimpleVelocity(velocity);\n\n                animations.blendInAnimation('run', Math.abs(playerSpeed) * (1 / maxPlayerSpeed));\n\n                MathService.releaseVec3(velocity);\n              });\n            }\n          },\n          onCreate: () => {\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import * as Three from 'three';\nimport {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  VarService,\n  TimeService,\n  MathService,\n  MathUtils\n} from 'three-default-cube';\n\nexport class DemoActionsAndUi extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    VarService.setVar('count', 0);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-actions-and-ui.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          actions: {\n            'increment': (object) => {\n              VarService.setVar('count', Math.min(VarService.getVar('count') + 1, 10));\n\n              object.material.emissiveIntensity = 1.0;\n              object.scale.setScalar(1.1);\n            },\n            'decrement': (object) => {\n              VarService.setVar('count', Math.max(0, VarService.getVar('count') - 1));\n\n              object.material.emissiveIntensity = 1.0;\n              object.scale.setScalar(1.1);\n            }\n          },\n          gameObjects: {\n            actionButton: (object) => {\n              const material = object.material;\n\n              material.emissiveIntensity = 0.0;\n              material.emissive = new Three.Color(0xffffcc);\n\n              TimeService.registerFrameListener(() => {\n                material.emissiveIntensity = MathUtils.lerp(material.emissiveIntensity, 0.0, 0.1);\n\n                const originalScale = MathService.getVec3(1.0, 1.0, 1.0);\n\n                object.scale.lerp(originalScale, 0.1);\n\n                MathService.releaseVec3(originalScale);\n              });\n            }\n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  RenderService,\n  SceneService,\n  mathPi4,\n  MathUtils\n} from 'three-default-cube';\n\nexport class DemoDebugging extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.preloadModel(require('../assets/models/character.glb')),\n      ],\n      onComplete: () => {\n        const spawnScene = () => {\n          AssetsService.getModel(require('../assets/models/character.glb')).then(characterModel => {\n            SceneService.parseScene({\n              target: characterModel,\n              onCreate: () => {\n                characterModel.position.x = MathUtils.randFloat(-5.0, 5.0)\n                characterModel.position.y -= 1.5;\n                characterModel.position.z -= 15.0 + MathUtils.randFloat(0.0, 10.0);\n\n                characterModel.rotation.y = MathUtils.randFloat(-mathPi4, mathPi4);\n\n                scene.add(characterModel);\n\n                setTimeout(() => {\n                  AssetsService.disposeAsset(characterModel);\n                }, 3000 + Math.random() * 500);\n              }\n            });\n          });\n\n          setTimeout(() => {\n            spawnScene();\n          }, 1000 + Math.random() * 500);\n        };\n\n        spawnScene();\n      }\n    });\n  }\n}\n","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  TimeService,\n  MathService,\n} from 'three-default-cube';\n\nexport class DemoGameObjects extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-game-objects.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          gameObjects: {\n            cubeRed: (object) => {\n              TimeService.registerFrameListener(({ elapsedTime }) => {\n                object.rotation.x += Math.sin(elapsedTime) * 0.1;\n              });\n            },\n            cubeGreen: (object) => {\n              TimeService.registerFrameListener(({ elapsedTime }) => {\n                object.position.y = Math.sin(elapsedTime) * 0.5;\n                object.rotation.x = Math.sin(elapsedTime) * -0.4;\n              });\n            },\n            cubeBlue: (object) => {\n              TimeService.registerFrameListener(({ elapsedTime }) => {\n                const scaleTarget = MathService.getVec3(1.0, 1.0, 1.0).multiplyScalar(Math.sin(elapsedTime) * 0.1 + 1.0);\n\n                object.scale.copy(scaleTarget);\n\n                MathService.releaseVec3(scaleTarget);\n              });\n            },\n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  VarService,\n  GameInfoService,\n} from 'three-default-cube';\n\nexport class DemoPersistence extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    await VarService.registerPersistentVar('viewCount', 0);\n\n    VarService.setVar('viewCount', VarService.getVar('viewCount') + 1);\n\n    if (VarService.getVar('viewCount') === 1) {\n      VarService.setVar('views', 'You saw this page 1 time');\n    } else if (VarService.getVar('viewCount') > 1 && VarService.getVar('viewCount') < 10) {\n      VarService.setVar('views', `You saw this page ${VarService.getVar('viewCount')} times`);\n    } else {\n      VarService.setVar('views', 'You saw this page plenty of times');\n    }\n\n    new Preloader({\n      spinnerTexture: GameInfoService.config.textures.spinner,\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-persistence.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          gameObjects: {\n            \n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import * as Three from 'three';\nimport {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  TimeService,\n  InputService,\n  PhysicsWrapper,\n  MathService,\n  replacePlaceholder,\n  AnimationWrapper,\n  UtilsService,\n  PhysicsService,\n  MathUtils\n} from 'three-default-cube';\n\nexport class SnowSurface {\n  target = null;\n  snowCanvas = null;\n  snowTexture = null;\n  snowProps = {\n    textureSize: 64,\n    textureColor: '#999999',\n    snowOffset: 2.0,\n    snowDisplacement: 0.1\n  };\n\n  constructor(target) {\n    this.target = target;\n\n    this.onCreate();\n  }\n\n  onCreate() {\n    if (this.target.material) {\n      AssetsService.disposeProps(this.target.material);\n    }\n\n    this.snowCanvas = document.createElement('canvas');\n    this.snowCanvas.width = this.snowProps.textureSize;\n    this.snowCanvas.height = this.snowProps.textureSize;\n  \n    const ctx = this.snowCanvas.getContext('2d');\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, this.snowCanvas.width, this.snowCanvas.height);\n    ctx.globalCompositeOperation = 'screen';\n  \n    this.snowTexture = new Three.CanvasTexture(this.snowCanvas);\n    AssetsService.registerDisposable(this.snowTexture);\n\n    this.target.material = new Three.MeshPhongMaterial({\n      color: 0xffffff,\n      side: Three.DoubleSide,\n      displacementMap: this.snowTexture,\n      displacementScale: -this.snowProps.snowDisplacement,\n      metalness: .5,\n      roughness: .5,\n      emissive: new Three.Color(0xffffff),\n      emissiveIntensity: 0.3\n    });\n\n    AssetsService.registerDisposable(this.target.material);\n  }\n\n  onInteraction({ hit } = {}) {\n    const { uv } = hit;\n    const { image: canvas } = this.snowTexture;\n\n    if (!uv || !canvas) {\n      return;\n    }\n\n    this.snowTexture.transformUv(uv);\n\n    const ctx = canvas.getContext('2d');\n    const x = uv.x * this.snowProps.textureSize - this.snowProps.snowOffset / 2;\n    const y = uv.y * this.snowProps.textureSize - this.snowProps.snowOffset / 2;\n\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(x, y, this.snowProps.snowOffset, this.snowProps.snowOffset);\n\n    this.snowTexture.needsUpdate = true;\n  }\n\n  dispose() {\n    if (this.target) {\n      delete this.target;\n    }\n\n    if (this.snowTexture) {\n      delete this.snowTexture;\n    }\n\n    delete this.snowCanvas;\n    this.snowCanvas = null;\n\n    delete this.snowProps;\n  }\n}\n\nexport class DemoPhysics extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    PhysicsService.registerSurfaceHandler('snow', SnowSurface, 'onInteraction');\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-physics.glb')),\n        AssetsService.getModel(require('../assets/models/character.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n        characterModel\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          gameObjects: {\n            'player': (object) => {\n              replacePlaceholder(object, characterModel);\n\n              const animations = new AnimationWrapper(characterModel);\n              animations.playAnimation('idle');\n\n              const physics = new PhysicsWrapper(object);\n              physics.enableNavmaps();\n\n              let playerSpeed = 0.0;\n              const maxPlayerSpeed = 0.04;\n\n              TimeService.registerFrameListener(() => {\n                const keyUp = InputService.keys['w'];\n                const keyDown = InputService.keys['s'];\n                const keyLeft = InputService.keys['a'];\n                const keyRight = InputService.keys['d'];\n\n                const velocity = MathService.getVec3(0.0, 0.0, 0.0);\n\n                if (keyUp) {\n                  velocity.z -= 1.0;\n                }\n\n                if (keyDown) {\n                  velocity.z += 1.0;\n                }\n\n                if (keyLeft) {\n                  velocity.x -= 1.0;\n                }\n\n                if (keyRight) {\n                  velocity.x += 1.0;\n                }\n\n                if (velocity.length() > 0.0) {\n                  playerSpeed = MathUtils.lerp(playerSpeed, maxPlayerSpeed, 0.2);\n\n                  const direction = MathService.getVec3(0.0, 0.0, 0.0);\n                  const rotationMock = UtilsService.getEmpty();\n\n                  object.getWorldPosition(direction).sub(velocity);\n                  rotationMock.position.copy(object.position);\n                  rotationMock.quaternion.copy(object.quaternion);\n                  rotationMock.lookAt(direction);\n\n                  object.quaternion.slerp(rotationMock.quaternion, 0.2);\n\n                  MathService.releaseVec3(direction);\n                  UtilsService.releaseEmpty(rotationMock);\n                } else {\n                  playerSpeed = MathUtils.lerp(playerSpeed, 0.0, 0.2);\n                }\n\n                velocity.normalize().multiplyScalar(playerSpeed);\n\n                physics.setSimpleVelocity(velocity);\n\n                animations.blendInAnimation('run', playerSpeed * (1 / maxPlayerSpeed));\n\n                MathService.releaseVec3(velocity);\n              });\n            }\n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import * as Three from 'three';\nimport {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  CameraService,\n  RenderService,\n  SceneService,\n  TimeService,\n  PhysicsWrapper,\n  MathService,\n  replacePlaceholder,\n  AnimationWrapper,\n  UtilsService,\n  AiService,\n  AiWrapper,\n  getRandomElement,\n  createArrowHelper,\n} from 'three-default-cube';\n\nexport class DemoAi extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-basic.glb')),\n        AssetsService.getModel(require('../assets/models/character.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n        characterModel\n      ]) => {\n        SceneService.parseScene({\n          target: worldModel,\n          navpath: 2,\n          gameObjects: {\n            'player': (object) => {\n              replacePlaceholder(object, characterModel);\n\n              const animations = new AnimationWrapper(characterModel);\n              animations.playAnimation('run');\n\n              const physics = new PhysicsWrapper(object);\n              physics.enableNavmaps();\n              physics.enableNoClip();\n\n              const ai = new AiWrapper(object);\n\n              ai.registerBehaviour(() => {\n                if (ai.hasTargetNode() && ai.getDistanceToTargetNode() <= 0.5) {\n                  ai.setTargetNode(null);\n                }\n\n                if (!ai.hasTargetNode() && ai.path.length === 0) {\n                  ai.setTargetNode(AiService.getAiNodeById(getRandomElement([ 1, 2, 3 ])));\n                  ai.findPathToTargetNode();\n                }\n\n                const targetNode = ai.getTargetNode();\n                const targetNodePosition = MathService.getVec3();\n                targetNode.getWorldPosition(targetNodePosition);\n\n                createArrowHelper(RenderService.getScene(), 'target-position', new Three.Vector3(0.0, 2.0, 0.0), targetNodePosition);\n\n                MathService.releaseVec3(targetNodePosition);\n\n                return { targetNode };\n              });\n\n              const playerSpeed = 0.04;\n\n              TimeService.registerFrameListener(() => {\n                const {\n                  targetNode\n                } = ai.getAiBehaviour();\n\n                if (!targetNode) {\n                  return;\n                }\n\n                const targetNodePosition = MathService.getVec3();\n                targetNode.getWorldPosition(targetNodePosition);\n\n                targetNodePosition.y = object.position.y;\n\n                const rotationMock = UtilsService.getEmpty();\n                object.add(rotationMock);\n\n                rotationMock.lookAt(targetNodePosition);\n                characterModel.quaternion.slerp(rotationMock.quaternion, 0.2);\n                \n                const playerDirection = MathService.getVec3();\n                characterModel.getWorldDirection(playerDirection);\n\n                physics.setSimpleVelocity(playerDirection.multiplyScalar(playerSpeed));\n                \n                MathService.releaseVec3(targetNodePosition);\n                MathService.releaseVec3(playerDirection);\n                UtilsService.releaseEmpty(rotationMock);\n              });\n            }\n          },\n          onCreate: () => {\n            CameraService.useCamera(CameraService.getCamera('initial'), false);\n\n            scene.add(worldModel);\n          }\n        });\n      }\n    });\n  }\n}\n","import {\n  ViewClass,\n  Preloader,\n  AssetsService,\n  RenderService,\n  SceneService,\n  VarService,\n  TimeService,\n  AnimationService,\n  UiService\n} from 'three-default-cube';\n\nexport class DemoUiAlignment extends ViewClass {\n  async onCreate() {\n    const scene = RenderService.getScene();\n\n    const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 7.0);\n    scene.add(ambientLight);\n\n    TimeService.registerIntervalListener(() => {\n      VarService.setVar('variable-x', `${Math.random() * 100.0}%`);\n      VarService.setVar('variable-y', `${Math.random() * 100.0}%`);\n    }, 3000);\n\n    new Preloader({\n      requireAssets: [\n        AssetsService.getModel(require('../assets/models/demo-ui-alignment.glb')),\n      ],\n      onComplete: ([\n        worldModel,\n      ]) => {\n        UiService.registerUiElement(worldModel);\n\n        const ambientLight = AssetsService.getAmbientLight(0xffffcc, 0x0000ff, 5.0);\n        UiService.uiScene.add(ambientLight);\n\n        worldModel.position.z -= 6.0;\n\n        SceneService.parseScene({\n          target: worldModel,\n          gameObjects: {\n            'marker': (object) => {\n              AnimationService.registerAnimation({\n                target: object,\n                onCreate: ({ target }) => {\n                  target.userData.rotation = target.rotation.clone();\n                },\n                onStep: ({ target, animationTime }) => {\n                  target.rotation.z = target.rotation.z - Math.cos(animationTime) * 0.001;\n                }\n              });\n            }\n          },\n          onCreate: () => {}\n        });\n      }\n    });\n  }\n}\n","import {\n  RenderService,\n  SystemService,\n  DebugFlags,\n  DummyDebug,\n  GameInfoService\n} from 'three-default-cube';\nimport { DemoViewsAndScenes } from './game-views/demo-views-and-scenes';\nimport { DemoCamera } from './game-views/demo-camera';\nimport { DemoActionsAndUi } from './game-views/demo-actions-and-ui';\nimport { DemoDebugging } from './game-views/demo-debugging';\nimport { DemoGameObjects } from './game-views/demo-game-objects';\nimport { DemoPersistence } from './game-views/demo-persistence';\nimport { DemoPhysics } from './game-views/demo-physics';\nimport { DemoAi } from './game-views/demo-ai';\nimport { DemoUiAlignment } from './game-views/demo-ui-alignment';\nconst { demoId } = Object.fromEntries(new URLSearchParams(window.location.search).entries());\n\nDummyDebug.on(DebugFlags.DEBUG_ENABLE);\n\nif (demoId === 'debugging') {\n  DummyDebug.on(DebugFlags.DEBUG_LIVE);\n  DummyDebug.on(DebugFlags.DEBUG_LOG_ASSETS);\n  DummyDebug.on(DebugFlags.DEBUG_LOG_MEMORY);\n  DummyDebug.on(DebugFlags.DEBUG_LOG_POOLS);\n  DummyDebug.on(DebugFlags.DEBUG_STORAGE);\n  DummyDebug.on(DebugFlags.DEBUG_TIME_LISTENERS);\n}\n\nGameInfoService\n  .system(60, 1.0, true, true, 0x000000)\n  .camera(50, 0.1, 1000.0)\n  .texture('spinner', require('./assets/ui/spinner-default.png'))\n  .font('default', require('./assets/ui/font.ttf'))\n  .model('intro', require('./assets/models/intro.glb'));\n\nSystemService.init();\nSystemService.onReady(async () => {\n  const rootElement = document.querySelector('#root');\n\n  RenderService.init({ domElement: rootElement });\n  RenderService.renderView(({\n    'camera': new DemoCamera(),\n    'views-and-scenes': new DemoViewsAndScenes(),\n    'actions-and-ui': new DemoActionsAndUi(),\n    'debugging': new DemoDebugging(),\n    'game-objects': new DemoGameObjects(),\n    'persistence': new DemoPersistence(),\n    'physics': new DemoPhysics(),\n    'ai': new DemoAi(),\n    'ui-alignment': new DemoUiAlignment(),\n  })[demoId]);\n\n  RenderService.run();\n});\n"],"sourceRoot":""}